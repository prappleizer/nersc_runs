(dp0
S'model'
p1
ccopy_reg
_reconstructor
p2
(cprospect.models.sedmodel
SedModel
p3
c__builtin__
object
p4
Ntp5
Rp6
(dp7
S'ndim'
p8
I14
sS'initial_theta'
p9
cnumpy.core.multiarray
_reconstruct
p10
(cnumpy
ndarray
p11
(I0
tp12
S'b'
p13
tp14
Rp15
(I1
(I14
tp16
cnumpy
dtype
p17
(S'f8'
p18
I0
I1
tp19
Rp20
(I3
S'<'
p21
NNNI-1
I-1
I0
tp22
bI00
S'\x00\x00\x00\x00\x00\x00$@\xbb\xbd\xd7\xd9\xdf|\xdb=\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x00@\xbb\xbd\xd7\xd9\xdf|\xdb=ffffff\xd6?ffffff\xd6?ffffff\xe6\xbf\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x0c@{\x14\xaeG\xe1z\x84?\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x08@'
p23
tp24
bsS'verbose'
p25
I01
sS'_config_dict'
p26
(dp27
S'tau'
p28
(dp29
S'prior_args'
p30
(dp31
S'mini'
p32
F0.1
sS'maxi'
p33
I100
ssS'N'
p34
I1
sS'init_disp'
p35
I10
sS'prior_function'
p36
cprospect.models.priors
logarithmic
p37
sS'init'
p38
F1.0
sS'isfree'
p39
I01
sS'units'
p40
S'Gyr'
p41
ssS'tpagb_norm_type'
p42
(dp43
g40
S'index'
p44
sg38
I2
sg39
I00
sg34
I1
ssS'dust_type'
p45
(dp46
g40
g44
sg38
I4
sg39
I00
sg34
I1
ssS'add_dust_emission'
p47
(dp48
g40
g44
sg38
I01
sg39
I00
sg34
I1
ssS'add_agb_dust_model'
p49
(dp50
g40
g44
sg38
I01
sg39
I00
sg34
I1
ssS'dust_index'
p51
(dp52
g38
F-0.7
sg34
I1
sg36
cprospect.models.priors
tophat
p53
sg30
(dp54
g32
F-1.5
sg33
F2.0
ssg39
I01
sg40
S''
p55
ssS'dust1'
p56
(dp57
g38
F0.35
sg34
I1
sg36
g53
sg30
(dp58
g32
F0.0
sg33
F2.0
ssg39
I01
sg40
g55
ssS'logzsol'
p59
(dp60
g30
(dp61
g32
I-1
sg33
F2.0
ssg34
I1
sg35
F0.1
sg36
g53
sg38
F0.0
sg39
I01
sg40
S'$\\log (Z/Z_\\odot)$'
p62
ssS'dust2'
p63
(dp64
S'reinit'
p65
I01
sg30
(dp66
g32
F0.0
sg33
F2.0
ssg34
I1
sg35
F0.3
sg36
g53
sg38
F0.35
sg39
I01
sg40
g55
ssS'zred'
p67
(dp68
g38
F0.0
sg34
I1
sg36
g53
sg30
(dp69
g32
F0.0
sg33
F4.0
ssg39
I00
sg40
g55
ssS'sfstart'
p70
(dp71
g30
(dp72
g32
F0.01
sg33
F14.0
ssg34
I1
sg35
F0.0
sg36
g53
sg38
F0.01
sg39
I00
sg40
g41
ssS'duste_umin'
p73
(dp74
g30
(dp75
g32
F0.1
sg33
F25.0
ssg34
I1
sg35
F1.0
sg36
g53
sg38
F1.0
sg39
I01
sg40
S'MMP83 local MW intensity'
p76
ssS'add_igm_absorbtion'
p77
(dp78
g40
g44
sg38
I00
sg39
I00
sg34
I1
ssS'add_neb_emission'
p79
(dp80
g40
g44
sg38
I01
sg39
I00
sg34
I1
ssS'duste_qpah'
p81
(dp82
g30
(dp83
g32
F0.1
sg33
F10.0
ssg34
I1
sg35
F1.0
sg36
g53
sg38
F3.5
sg39
I01
sg40
g76
ssS'agb_dust'
p84
(dp85
g40
g44
sg38
I1
sg39
I00
sg34
I1
ssS'tage'
p86
(dp87
g30
(dp88
g32
F0.101
sg33
F14.0
ssg34
I1
sg35
F3.0
sg36
g53
sg38
F5.0
sg39
I01
sg40
g41
ssS'sfh'
p89
(dp90
g40
S'type'
p91
sg38
I4
sg39
I00
sg34
I1
ssS'duste_gamma'
p92
(dp93
g30
(dp94
g32
F0.0
sg33
F0.3
ssg34
I1
sg35
F0.1
sg36
g37
sg38
F0.01
sg39
I01
sg40
g76
ssS'dust_tesc'
p95
(dp96
S'prior_function_name'
p97
g53
sg38
F7.0
sg34
I1
sg30
(dp98
g32
F3.0
sg33
F9.0
ssg39
I00
sg40
S'log(Gyr)'
p99
ssS'gas_logz'
p100
(dp101
S'depends_on'
p102
cnew_params_parametric_noisemodel
stellar_logzsol
p103
sg30
(dp104
g32
F-2.0
sg33
F0.5
ssg34
I1
sg36
g53
sg38
F0.0
sg39
I00
sg40
S'log Z/Z_\\odot'
p105
ssS'gas_logu'
p106
(dp107
g38
F-2.0
sg34
I1
sg36
g53
sg30
(dp108
g32
I-4
sg33
I-1
ssg39
I01
sg40
g55
ssS'phot_unc_factor'
p109
(dp110
g38
F3.0
sg34
I1
sg36
g53
sg30
(dp111
g32
F0.1
sg33
I5
ssg39
I01
sg40
S'mags'
p112
ssS'mass'
p113
(dp114
g30
(dp115
g32
F0.01
sg33
I1000
ssg34
I1
sg35
I5
sg36
g53
sg38
I10
sg39
I01
sg40
S'M_\\odot'
p116
ssS'tburst'
p117
(dp118
g30
(dp119
g32
F0.0
sg33
F13.0
ssg34
I1
sg35
F1.0
sg36
g53
sg38
F2.0
sg39
I01
sg40
g55
ssS'fburst'
p120
(dp121
g38
F0.0
sg34
I1
sg36
g53
sg30
(dp122
g32
F0.0
sg33
F0.9
ssg39
I01
sg40
g55
sssS'init_config_list'
p123
(lp124
(dp125
S'name'
p126
g67
sg30
(dp127
g32
F0.0
sg33
F4.0
ssg34
I1
sg36
g53
sg38
F0.0
sg39
I00
sg40
g55
sa(dp128
g40
g91
sg38
I4
sg39
I00
sg126
g89
sg34
I1
sa(dp129
g35
I5
sg36
g53
sg38
I10
sg39
I01
sg126
g113
sg40
g116
sg30
(dp130
g32
F0.01
sg33
I1000
ssg34
I1
sa(dp131
g35
F0.1
sg36
g53
sg38
F0.0
sg39
I01
sg126
g59
sg40
g62
sg30
(dp132
g32
I-1
sg33
F2.0
ssg34
I1
sa(dp133
g35
I10
sg36
g37
sg38
F1.0
sg39
I01
sg126
g28
sg40
g41
sg30
(dp134
g32
F0.1
sg33
I100
ssg34
I1
sa(dp135
g35
F3.0
sg36
g53
sg38
F5.0
sg39
I01
sg126
g86
sg40
g41
sg30
(dp136
g32
F0.101
sg33
F14.0
ssg34
I1
sa(dp137
g35
F0.0
sg36
g53
sg38
F0.01
sg39
I00
sg126
g70
sg40
g41
sg30
(dp138
g32
F0.01
sg33
F14.0
ssg34
I1
sa(dp139
g35
F1.0
sg36
g53
sg38
F2.0
sg39
I01
sg126
g117
sg40
g55
sg30
(dp140
g32
F0.0
sg33
F13.0
ssg34
I1
sa(dp141
g126
g120
sg30
(dp142
g32
F0.0
sg33
F0.9
ssg34
I1
sg36
g53
sg38
F0.0
sg39
I01
sg40
g55
sa(dp143
g126
g56
sg30
(dp144
g32
F0.0
sg33
F2.0
ssg34
I1
sg36
g53
sg38
F0.35
sg39
I01
sg40
g55
sa(dp145
g35
F0.3
sg36
g53
sg38
F0.35
sg39
I01
sg126
g63
sg40
g55
sg65
I01
sg30
(dp146
g32
F0.0
sg33
F2.0
ssg34
I1
sa(dp147
g126
g51
sg30
(dp148
g32
F-1.5
sg33
F2.0
ssg34
I1
sg36
g53
sg38
F-0.7
sg39
I01
sg40
g55
sa(dp149
g97
g53
sg126
g95
sg30
(dp150
g32
F3.0
sg33
F9.0
ssg34
I1
sg38
F7.0
sg39
I00
sg40
g99
sa(dp151
g40
g44
sg38
I4
sg39
I00
sg126
g45
sg34
I1
sa(dp152
g40
g44
sg38
I01
sg39
I00
sg126
g47
sg34
I1
sa(dp153
g35
F1.0
sg36
g53
sg38
F1.0
sg39
I01
sg126
g73
sg40
g76
sg30
(dp154
g32
F0.1
sg33
F25.0
ssg34
I1
sa(dp155
g35
F1.0
sg36
g53
sg38
F3.5
sg39
I01
sg126
g81
sg40
g76
sg30
(dp156
g32
F0.1
sg33
F10.0
ssg34
I1
sa(dp157
g35
F0.1
sg36
g37
sg38
F0.01
sg39
I01
sg126
g92
sg40
g76
sg30
(dp158
g32
F0.0
sg33
F0.3
ssg34
I1
sa(dp159
g40
g44
sg38
I2
sg39
I00
sg126
g42
sg34
I1
sa(dp160
g40
g44
sg38
I01
sg39
I00
sg126
g49
sg34
I1
sa(dp161
g40
g44
sg38
I1
sg39
I00
sg126
g84
sg34
I1
sa(dp162
g40
g44
sg38
I01
sg39
I00
sg126
g79
sg34
I1
sa(dp163
g36
g53
sg38
F0.0
sg39
I00
sg126
g100
sg40
g105
sg102
g103
sg30
(dp164
g32
F-2.0
sg33
F0.5
ssg34
I1
sa(dp165
g126
g106
sg30
(dp166
g32
I-4
sg33
I-1
ssg34
I1
sg36
g53
sg38
F-2.0
sg39
I01
sg40
g55
sa(dp167
g40
g44
sg38
I00
sg39
I00
sg126
g77
sg34
I1
sa(dp168
g126
g109
sg30
(dp169
g32
F0.1
sg33
I5
ssg34
I1
sg36
g53
sg38
F3.0
sg39
I01
sg40
g112
sasS'_has_parameter_dependencies'
p170
I01
sS'config_list'
p171
g124
sS'params'
p172
(dp173
g28
g10
(g11
(I0
tp174
g13
tp175
Rp176
(I1
(I1
tp177
g20
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p178
tp179
bsg42
g10
(g11
(I0
tp180
g13
tp181
Rp182
(I1
(I1
tp183
g17
(S'i8'
p184
I0
I1
tp185
Rp186
(I3
S'<'
p187
NNNI-1
I-1
I0
tp188
bI00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p189
tp190
bsg45
g10
(g11
(I0
tp191
g13
tp192
Rp193
(I1
(I1
tp194
g186
I00
S'\x04\x00\x00\x00\x00\x00\x00\x00'
p195
tp196
bsg79
g10
(g11
(I0
tp197
g13
tp198
Rp199
(I1
(I1
tp200
g17
(S'b1'
p201
I0
I1
tp202
Rp203
(I3
S'|'
p204
NNNI-1
I-1
I0
tp205
bI00
S'\x01'
p206
tp207
bsg49
g10
(g11
(I0
tp208
g13
tp209
Rp210
(I1
(I1
tp211
g203
I00
g206
tp212
bsg51
g10
(g11
(I0
tp213
g13
tp214
Rp215
(I1
(I1
tp216
g20
I00
S'ffffff\xe6\xbf'
p217
tp218
bsg56
g10
(g11
(I0
tp219
g13
tp220
Rp221
(I1
(I1
tp222
g20
I00
S'ffffff\xd6?'
p223
tp224
bsg59
g10
(g11
(I0
tp225
g13
tp226
Rp227
(I1
(I1
tp228
g20
I00
S'\xbb\xbd\xd7\xd9\xdf|\xdb='
p229
tp230
bsg63
g10
(g11
(I0
tp231
g13
tp232
Rp233
(I1
(I1
tp234
g20
I00
S'ffffff\xd6?'
p235
tp236
bsg67
g10
(g11
(I0
tp237
g13
tp238
Rp239
(I1
(I1
tp240
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p241
tp242
bsg70
g10
(g11
(I0
tp243
g13
tp244
Rp245
(I1
(I1
tp246
g20
I00
S'{\x14\xaeG\xe1z\x84?'
p247
tp248
bsg73
g10
(g11
(I0
tp249
g13
tp250
Rp251
(I1
(I1
tp252
g20
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p253
tp254
bsg77
g10
(g11
(I0
tp255
g13
tp256
Rp257
(I1
(I1
tp258
g203
I00
S'\x00'
p259
tp260
bsg47
g10
(g11
(I0
tp261
g13
tp262
Rp263
(I1
(I1
tp264
g203
I00
g206
tp265
bsg81
g10
(g11
(I0
tp266
g13
tp267
Rp268
(I1
(I1
tp269
g20
I00
S'\x00\x00\x00\x00\x00\x00\x0c@'
p270
tp271
bsg84
g10
(g11
(I0
tp272
g13
tp273
Rp274
(I1
(I1
tp275
g186
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p276
tp277
bsg86
g10
(g11
(I0
tp278
g13
tp279
Rp280
(I1
(I1
tp281
g20
I00
S'\x00\x00\x00\x00\x00\x00\x14@'
p282
tp283
bsg89
g10
(g11
(I0
tp284
g13
tp285
Rp286
(I1
(I1
tp287
g186
I00
S'\x04\x00\x00\x00\x00\x00\x00\x00'
p288
tp289
bsg92
g10
(g11
(I0
tp290
g13
tp291
Rp292
(I1
(I1
tp293
g20
I00
S'{\x14\xaeG\xe1z\x84?'
p294
tp295
bsg95
g10
(g11
(I0
tp296
g13
tp297
Rp298
(I1
(I1
tp299
g20
I00
S'\x00\x00\x00\x00\x00\x00\x1c@'
p300
tp301
bsg100
g227
sg106
g10
(g11
(I0
tp302
g13
tp303
Rp304
(I1
(I1
tp305
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
p306
tp307
bsg109
g10
(g11
(I0
tp308
g13
tp309
Rp310
(I1
(I1
tp311
g20
I00
S'\x00\x00\x00\x00\x00\x00\x08@'
p312
tp313
bsg113
g10
(g11
(I0
tp314
g13
tp315
Rp316
(I1
(I1
tp317
g20
I00
S'\x00\x00\x00\x00\x00\x00$@'
p318
tp319
bsg117
g10
(g11
(I0
tp320
g13
tp321
Rp322
(I1
(I1
tp323
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00@'
p324
tp325
bsg120
g10
(g11
(I0
tp326
g13
tp327
Rp328
(I1
(I1
tp329
g20
I00
S'\xbb\xbd\xd7\xd9\xdf|\xdb='
p330
tp331
bssS'theta_index'
p332
(dp333
g56
(I6
I7
tp334
sg59
(I1
I2
tp335
sg109
(I13
I14
tp336
sg63
(I7
I8
tp337
sg81
(I10
I11
tp338
sg28
(I2
I3
tp339
sg106
(I12
I13
tp340
sg86
(I3
I4
tp341
sg113
(I0
I1
tp342
sg51
(I8
I9
tp343
sg117
(I4
I5
tp344
sg92
(I11
I12
tp345
sg73
(I9
I10
tp346
sg120
(I5
I6
tp347
ssbsS'paramfile_text'
p348
S'import numpy as np\nfrom prospect.models import priors, sedmodel\nfrom prospect.sources import CSPBasis\ntophat = priors.tophat\nlogarithmic = priors.logarithmic \nfrom sedpy.observate import load_filters\nimport os\n# --------------\n# RUN_PARAMS\n# --------------\n\nrun_params = {\'verbose\':False,\n              \'debug\':False,\n              \'outfile\':\'nersc/sed3_longerrun\',                    #### SET OUTPUT DIR/FILE ####\n              # Fitter parameters\n              \'nwalkers\':128,                                              #### SET nwalkers\n              \'nburn\':[128, 128, 128], \'niter\':1024,                        #### SET nburn\n              \'do_powell\': False,\n              \'ftol\':0.5e-5, \'maxfev\':5000,\n              \'initial_disp\':0.1,\n              # Obs data parameter\n      \t      \'phottable\':\'../../SEDs/v3/seds/iteration3_sed.txt\',        #### SET INPUT SED (CHANGE NUM) ####\n              \'objname\':\'iteration3\',                                     #### SET OBJNAME ####               \n              \'filt_dir\':\'../../SEDs/v3/composite_filters/iteration_3/\',   #### SET INPUT FILTER DIRECTORY ####\n              \'logify_spectrum\':False,\n              \'normalize_spectrum\':False,\n              \'wlo\':3750, \'whi\':7200,\n              # SPS parameters\n              \'zcontinuous\': 1,\n              }\n\n# --------------\n# OBS\n# --------------\n\ndef load_obs(objname=\'objname\', phottable=\'phottable\',filt_dir=\'filt_dir\', **kwargs):\n    """Load photometry from an ascii file.  Assumes the following columns:\n    `objid`, `filterset`, [`mag0`,....,`magN`] where N >= 11.  The User should\n    modify this function (including adding keyword arguments) to read in their\n    particular data format and put it in the required dictionary.\n    :param objid:\n        The object id for the row of the photomotery file to use.  Integer.\n        Requires that there be an `objid` column in the ascii file.\n    :param phottable:\n        Name (and path) of the ascii file containing the photometry.\n    :returns obs:\n        Dictionary of observational data.\n    """\n    catalog = np.loadtxt(phottable)\n    catalog = np.transpose(catalog)\n\n    fluxes = catalog[1] #Should already be in Maggies\n    fl_maggies = fluxes \n    fl_err = catalog[2] #Should Already Be in Maggies\n    er_maggies = fl_err \n\n    ####################################\n    # Create list of filename strings\n    filter_files = [f[0:-4] for f in os.listdir(filt_dir)] #only filter files (in increasing num) should be present in the filter directory\n    filter_files = sorted(filter_files)\n     ####################################\n\n\n    # Build output dictionary. \n    obs = {}\n    # This is a list of sedpy filter objects.    See the\n    # sedpy.observate.load_filters command for more details on its syntax.\n\n    obs[\'filters\'] = load_filters(filter_files, directory=filt_dir)\n\n    # This is a list of maggies, converted from mags.  It should have the same\n    # order as `filters` above.\n\n    obs[\'maggies\'] = fl_maggies\n    obs[\'maggies_unc\'] = er_maggies #don\'t toy with because we are using parametric noise fitting\n    \n    obs[\'phot_wave\'] = np.array([f.wave_effective for f in obs[\'filters\']]) \n    obs[\'filter_jitter\'] = obs[\'phot_wave\'] < 1e5 #Apply the filter jitter paramter to points below 10um\n    \n    # Here we mask out any NaNs or infs\n    obs[\'phot_mask\'] = [True]*len(fl_maggies)\n    # We have no spectrum\n    obs[\'wavelength\'] = None\n\n    # Add unessential bonus info.  This will be sored in output\n    #obs[\'dmod\'] = catalog[ind][\'dmod\']\n    obs[\'objname\'] = objname\n    return obs\n\n\n# --------------\n# SPS Object\n# --------------\n\ndef load_sps(zcontinuous=1, compute_vega_mags=False, **extras):\n    sps = CSPBasis(zcontinuous=zcontinuous,\n                   compute_vega_mags=compute_vega_mags)\n    return sps\n\n#--------------\n# New Kernel \n#--------------\n\nfrom prospect.likelihood.kernels import Kernel\n\nclass PhotUncorrelated(Kernel):\n\n\n\n    # Simple uncorrelated noise model\n\n    ndim = 1\n\n    kernel_params = [\'amplitude\']\n\n\n\n    def construct_kernel(self, metric):\n\n        s = metric.shape[0]\n\n        jitter = self.params[\'amplitude\']**2 * np.ones(s)\n\n        jitter[~metric] = 1.0\n\n        if metric.ndim == 2:\n\n            return np.diag(jitter)\n\n        elif metric.ndim == 1:\n\n            return jitter\n\n        else:\n\n            raise(NotImplementedError)\n\ndef load_gp(**extras):\n\n    from prospect.likelihood import NoiseModel\n\n    # Here we instantiate the kernels and give names to the parameters of each\n\n    # kernel\n\n    pjitter = PhotUncorrelated([\'phot_unc_factor\'])\n\n    # Here we describe how the (weighted) kernels are combined to produce the noise model.\n\n    # The NoiseModel below implements the following:\n\n    # \n\n    phot_noise = NoiseModel(metric_name=\'filter_jitter\',\n\n                            kernels=[pjitter],\n\n                            weight_by=[\'maggies_unc\'])\n\n    \n\n    return None, phot_noise\n\n# --------------\n# MODEL_PARAMS\n# --------------\n\nmodel_params = []\n\n# --- Distance ---\nmodel_params.append({\'name\': \'zred\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': 0.0,\n                        \'units\': \'\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':4.0}})\n\n# --- SFH --------\nmodel_params.append({\'name\': \'sfh\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': 4,\n                        \'units\': \'type\'\n                    })\n\nmodel_params.append({\'name\': \'mass\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 10,\n                        \'init_disp\': 5,\n                        \'units\': r\'M_\\odot\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':0.01, \'maxi\':1000}})\n\nmodel_params.append({\'name\': \'logzsol\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 0.0,\n                        \'init_disp\': 0.1,\n                        \'units\': r\'$\\log (Z/Z_\\odot)$\',\n                        \'prior_function\': tophat,\n                        \'prior_args\': {\'mini\':-1, \'maxi\':2.0}})\n\n#model_params.append({\'name\': \'pmetals\', \'N\': 1,\n#                        \'isfree\': False,\n#                        \'init\': -99.0,\n#                        \'init_disp\': 0.1,\n#                        \'units\': r\'$\\log (Z/Z_\\odot)$\',\n#                        \'prior_function\': tophat,\n#                        \'prior_args\': {\'mini\':-99.0, \'maxi\':2.0}})\n                        \nmodel_params.append({\'name\': \'tau\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 1.0,\n                        \'init_disp\': 10,\n                        \'units\': \'Gyr\',\n                        \'prior_function\':logarithmic,\n                        \'prior_args\': {\'mini\':0.1, \'maxi\':100}})\n\nmodel_params.append({\'name\': \'tage\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 5.0,\n                        \'init_disp\': 3.0,\n                        \'units\': \'Gyr\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':0.101, \'maxi\':14.0}})\n\nmodel_params.append({\'name\': \'sfstart\', \'N\': 1,\n                        \'isfree\':False,\n                        \'init\': 0.01,\n                        \'init_disp\': 0.0,\n                        \'units\': \'Gyr\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':0.01, \'maxi\':14.0}})\n\nmodel_params.append({\'name\': \'tburst\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 2.0,\n                        \'init_disp\': 1.0,\n                        \'units\': \'\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':13.0}})\n\nmodel_params.append({\'name\': \'fburst\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 0.0,\n                        \'units\': \'\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':0.9}})\n\n# --- Dust ---------\nmodel_params.append({\'name\': \'dust1\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 0.35,\n                        \'units\': \'\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':2.0}})\n\nmodel_params.append({\'name\': \'dust2\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 0.35,\n                        \'reinit\': True,\n                        \'init_disp\': 0.3,\n                        \'units\': \'\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':2.0}})\n\nmodel_params.append({\'name\': \'dust_index\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': -0.7,\n                        \'units\': \'\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':-1.5, \'maxi\':2.0}})\n\n#model_params.append({\'name\': \'dust1_index\', \'N\': 1,\n#                        \'isfree\': False,\n#                        \'init\': -1.0,\n#                        \'units\': \'\',\n#                        \'prior_function\':tophat,\n#                        \'prior_args\': {\'mini\':-1.5, \'maxi\':-0.5}})\n\nmodel_params.append({\'name\': \'dust_tesc\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': 7.0,\n                        \'units\': \'log(Gyr)\',\n                        \'prior_function_name\': tophat,\n                        \'prior_args\':{\'mini\':3.0, \'maxi\':9.0} })\n\nmodel_params.append({\'name\': \'dust_type\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': 4,\n                        \'units\': \'index\'})\n\nmodel_params.append({\'name\': \'add_dust_emission\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': True,\n                        \'units\': \'index\'})\n\nmodel_params.append({\'name\': \'duste_umin\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 1.0,\n                        \'init_disp\': 1.0,\n                        \'prior_function\': tophat,\n                        \'prior_args\': {\'mini\':0.1,\'maxi\':25.0},\n                        \'units\': \'MMP83 local MW intensity\'})\nmodel_params.append({\'name\': \'duste_qpah\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 3.5,\n                        \'init_disp\': 1.0,\n                        \'prior_function\': tophat,\n                        \'prior_args\': {\'mini\':.1,\'maxi\':10.0},\n                        \'units\': \'MMP83 local MW intensity\'})\nmodel_params.append({\'name\': \'duste_gamma\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 0.01,\n                        \'init_disp\': .1,\n                        \'prior_function\': logarithmic,\n                        \'prior_args\': {\'mini\':0.0,\'maxi\':0.3},\n                        \'units\': \'MMP83 local MW intensity\'})\n\n# --- Stellar Pops ------------\nmodel_params.append({\'name\': \'tpagb_norm_type\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': 2,\n                        \'units\': \'index\'})\n\nmodel_params.append({\'name\': \'add_agb_dust_model\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': True,\n                        \'units\': \'index\'})\n\nmodel_params.append({\'name\': \'agb_dust\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': 1,\n                        \'units\': \'index\'})\n\n# --- Nebular Emission ------\n\n# Here is a really simple function that takes a **dict argument, picks out the\n# `logzsol` key, and returns the value.  This way, we can have gas_logz find\n# the value of logzsol and use it, if we uncomment the \'depends_on\' line in the\n# `gas_logz` parameter definition.\n#\n# One can use this kind of thing to transform parameters as well (like making\n# them linear instead of log, or divide everything by 10, or whatever.) You can\n# have one parameter depend on several others (or vice versa).  Just remember\n# that a parameter with `depends_on` must always be fixed.\n\ndef stellar_logzsol(logzsol=0.0, **extras):\n    return logzsol\n\nmodel_params.append({\'name\': \'add_neb_emission\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': True,\n                        \'units\': \'index\'})\n\nmodel_params.append({\'name\': \'gas_logz\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': 0.0,\n                        \'units\': r\'log Z/Z_\\odot\',\n                        \'depends_on\': stellar_logzsol,\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':-2.0, \'maxi\':0.5}})\n\nmodel_params.append({\'name\': \'gas_logu\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': -2.0,\n                        \'units\': \'\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':-4, \'maxi\':-1}})\n\n#--- IGM Absorbtion -------\nmodel_params.append({\'name\': \'add_igm_absorbtion\', \'N\': 1,\n                        \'isfree\': False,\n                        \'init\': False,\n                        \'units\': \'index\'})\n\n\n# --- Calibration ---------\n\nmodel_params.append({\'name\': \'phot_unc_factor\', \'N\': 1,\n                        \'isfree\': True,\n                        \'init\': 3.0,\n                        \'units\': \'mags\',\n                        \'prior_function\':tophat,\n                        \'prior_args\': {\'mini\':0.1, \'maxi\':5}})\n\ndef load_model(**extras):\n    # In principle (and we\'ve done it) you could have the model depend on\n    # command line arguments (or anything in run_params) by making changes to\n    # `model_params` here before instantiation the SedModel object.  Up to you.\n    return sedmodel.SedModel(model_params)\n\n'
p349
sS'prospector_version'
p350
S'3465649'
p351
sS'powell'
p352
Ns.