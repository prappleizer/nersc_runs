(dp0
S'model'
p1
ccopy_reg
_reconstructor
p2
(cprospect.models.sedmodel
SedModel
p3
c__builtin__
object
p4
Ntp5
Rp6
(dp7
S'ndim'
p8
I5
sS'initial_theta'
p9
cnumpy.core.multiarray
_reconstruct
p10
(cnumpy
ndarray
p11
(I0
tp12
S'b'
p13
tp14
Rp15
(I1
(I5
tp16
cnumpy
dtype
p17
(S'f8'
p18
I0
I1
tp19
Rp20
(I3
S'<'
p21
NNNI-1
I-1
I0
tp22
bI00
S'\x00\x00\x00\x00\xd0\x12cA\xbb\xbd\xd7\xd9\xdf|\xdb=\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x14@ffffff\xd6?'
p23
tp24
bsS'verbose'
p25
I01
sS'_config_dict'
p26
(dp27
S'tau'
p28
(dp29
S'init'
p30
F1.0
sS'N'
p31
I1
sS'prior_function'
p32
cprospect.models.priors
logarithmic
p33
sS'prior_args'
p34
(dp35
S'mini'
p36
F0.1
sS'maxi'
p37
I100
ssS'isfree'
p38
I01
sS'units'
p39
S'Gyr'
p40
ssS'tpagb_norm_type'
p41
(dp42
g39
S'index'
p43
sg30
I2
sg38
I00
sg31
I1
ssS'dust_type'
p44
(dp45
g39
g43
sg30
I0
sg38
I00
sg31
I1
ssS'phot_jitter'
p46
(dp47
g30
F0.0
sg31
I1
sg32
cprospect.models.priors
tophat
p48
sg34
(dp49
g36
F0.0
sg37
F0.2
ssg38
I00
sg39
S'mags'
p50
ssS'add_neb_emission'
p51
(dp52
g30
I01
sg38
I00
sg31
I1
ssS'add_agb_dust_model'
p53
(dp54
g39
g43
sg30
I01
sg38
I00
sg31
I1
ssS'dust_index'
p55
(dp56
g30
F-0.7
sg31
I1
sg32
g48
sg34
(dp57
g36
F-1.5
sg37
F-0.5
ssg38
I00
sg39
S''
p58
ssS'dust1_index'
p59
(dp60
g30
F-1.0
sg31
I1
sg32
g48
sg34
(dp61
g36
F-1.5
sg37
F-0.5
ssg38
I00
sg39
g58
ssS'dust1'
p62
(dp63
g30
F0.0
sg31
I1
sg32
g48
sg34
(dp64
g36
F0.1
sg37
F2.0
ssg38
I00
sg39
g58
ssS'logzsol'
p65
(dp66
g34
(dp67
g36
I-1
sg37
F0.19
ssg31
I1
sS'init_disp'
p68
F0.1
sg32
g48
sg30
I0
sg38
I01
sg39
S'$\\log (Z/Z_\\odot)$'
p69
ssS'dust2'
p70
(dp71
S'reinit'
p72
I01
sg34
(dp73
g36
F0.0
sg37
F2.0
ssg31
I1
sg68
F0.3
sg32
g48
sg30
F0.35
sg38
I01
sg39
g58
ssS'zred'
p74
(dp75
g30
F0.0
sg31
I1
sg32
g48
sg34
(dp76
g36
F0.0
sg37
F4.0
ssg38
I00
sg39
g58
ssS'sfstart'
p77
(dp78
g30
F0.0
sg31
I1
sg32
g48
sg34
(dp79
g36
F0.1
sg37
F14.0
ssg38
I00
sg39
g40
ssS'duste_umin'
p80
(dp81
g39
S'MMP83 local MW intensity'
p82
sg30
F1.0
sg38
I00
sg31
I1
ssS'add_dust_emission'
p83
(dp84
g39
g43
sg30
I01
sg38
I00
sg31
I1
ssS'agb_dust'
p85
(dp86
g39
g43
sg30
I1
sg38
I00
sg31
I1
ssS'tage'
p87
(dp88
g34
(dp89
g36
F0.101
sg37
F14.0
ssg31
I1
sg68
F3.0
sg32
g48
sg30
F5.0
sg38
I01
sg39
g40
ssS'sfh'
p90
(dp91
g39
S'type'
p92
sg30
I4
sg38
I00
sg31
I1
ssS'dust_tesc'
p93
(dp94
S'prior_function_name'
p95
Nsg30
F7.0
sg31
I1
sg34
Nsg38
I00
sg39
S'log(Gyr)'
p96
ssS'gas_logz'
p97
(dp98
g30
F0.0
sg31
I1
sg32
g48
sg34
(dp99
g36
F-2.0
sg37
F0.5
ssg38
I00
sg39
S'log Z/Z_\\odot'
p100
ssS'gas_logu'
p101
(dp102
g30
F-2.0
sg31
I1
sg32
g48
sg34
(dp103
g36
I-4
sg37
I-1
ssg38
I00
sg39
g58
ssS'mass'
p104
(dp105
g34
(dp106
g36
F1000000.0
sg37
F1000000000.0
ssg31
I1
sg68
F1000000.0
sg32
g48
sg30
F10000000.0
sg38
I01
sg39
S'M_\\odot'
p107
ssS'tburst'
p108
(dp109
g30
F0.0
sg31
I1
sg32
g48
sg34
(dp110
g36
F0.0
sg37
F1.3
ssg38
I00
sg39
g58
ssS'fburst'
p111
(dp112
g30
F0.0
sg31
I1
sg32
g48
sg34
(dp113
g36
F0.0
sg37
F0.5
ssg38
I00
sg39
g58
sssS'init_config_list'
p114
(lp115
(dp116
S'name'
p117
g74
sg34
(dp118
g36
F0.0
sg37
F4.0
ssg31
I1
sg32
g48
sg30
F0.0
sg38
I00
sg39
g58
sa(dp119
g39
g92
sg30
I4
sg38
I00
sg117
g90
sg31
I1
sa(dp120
g68
F1000000.0
sg32
g48
sg30
F10000000.0
sg38
I01
sg117
g104
sg39
g107
sg34
(dp121
g36
F1000000.0
sg37
F1000000000.0
ssg31
I1
sa(dp122
g68
F0.1
sg32
g48
sg30
I0
sg38
I01
sg117
g65
sg39
g69
sg34
(dp123
g36
I-1
sg37
F0.19
ssg31
I1
sa(dp124
g117
g28
sg34
(dp125
g36
F0.1
sg37
I100
ssg31
I1
sg32
g33
sg30
F1.0
sg38
I01
sg39
g40
sa(dp126
g68
F3.0
sg32
g48
sg30
F5.0
sg38
I01
sg117
g87
sg39
g40
sg34
(dp127
g36
F0.101
sg37
F14.0
ssg31
I1
sa(dp128
g117
g77
sg34
(dp129
g36
F0.1
sg37
F14.0
ssg31
I1
sg32
g48
sg30
F0.0
sg38
I00
sg39
g40
sa(dp130
g117
g108
sg34
(dp131
g36
F0.0
sg37
F1.3
ssg31
I1
sg32
g48
sg30
F0.0
sg38
I00
sg39
g58
sa(dp132
g117
g111
sg34
(dp133
g36
F0.0
sg37
F0.5
ssg31
I1
sg32
g48
sg30
F0.0
sg38
I00
sg39
g58
sa(dp134
g117
g62
sg34
(dp135
g36
F0.1
sg37
F2.0
ssg31
I1
sg32
g48
sg30
F0.0
sg38
I00
sg39
g58
sa(dp136
g68
F0.3
sg32
g48
sg30
F0.35
sg38
I01
sg117
g70
sg39
g58
sg72
I01
sg34
(dp137
g36
F0.0
sg37
F2.0
ssg31
I1
sa(dp138
g117
g55
sg34
(dp139
g36
F-1.5
sg37
F-0.5
ssg31
I1
sg32
g48
sg30
F-0.7
sg38
I00
sg39
g58
sa(dp140
g117
g59
sg34
(dp141
g36
F-1.5
sg37
F-0.5
ssg31
I1
sg32
g48
sg30
F-1.0
sg38
I00
sg39
g58
sa(dp142
g95
Nsg117
g93
sg34
Nsg31
I1
sg30
F7.0
sg38
I00
sg39
g96
sa(dp143
g39
g43
sg30
I0
sg38
I00
sg117
g44
sg31
I1
sa(dp144
g39
g43
sg30
I01
sg38
I00
sg117
g83
sg31
I1
sa(dp145
g39
g82
sg30
F1.0
sg38
I00
sg117
g80
sg31
I1
sa(dp146
g39
g43
sg30
I2
sg38
I00
sg117
g41
sg31
I1
sa(dp147
g39
g43
sg30
I01
sg38
I00
sg117
g53
sg31
I1
sa(dp148
g39
g43
sg30
I1
sg38
I00
sg117
g85
sg31
I1
sa(dp149
g30
I01
sg38
I00
sg117
g51
sg31
I1
sa(dp150
g117
g97
sg34
(dp151
g36
F-2.0
sg37
F0.5
ssg31
I1
sg32
g48
sg30
F0.0
sg38
I00
sg39
g100
sa(dp152
g117
g101
sg34
(dp153
g36
I-4
sg37
I-1
ssg31
I1
sg32
g48
sg30
F-2.0
sg38
I00
sg39
g58
sa(dp154
g117
g46
sg34
(dp155
g36
F0.0
sg37
F0.2
ssg31
I1
sg32
g48
sg30
F0.0
sg38
I00
sg39
g50
sasS'_has_parameter_dependencies'
p156
I00
sS'config_list'
p157
g115
sS'params'
p158
(dp159
g28
g10
(g11
(I0
tp160
g13
tp161
Rp162
(I1
(I1
tp163
g20
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p164
tp165
bsg41
g10
(g11
(I0
tp166
g13
tp167
Rp168
(I1
(I1
tp169
g17
(S'i8'
p170
I0
I1
tp171
Rp172
(I3
S'<'
p173
NNNI-1
I-1
I0
tp174
bI00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p175
tp176
bsg44
g10
(g11
(I0
tp177
g13
tp178
Rp179
(I1
(I1
tp180
g172
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p181
tp182
bsg46
g10
(g11
(I0
tp183
g13
tp184
Rp185
(I1
(I1
tp186
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p187
tp188
bsg83
g10
(g11
(I0
tp189
g13
tp190
Rp191
(I1
(I1
tp192
g17
(S'b1'
p193
I0
I1
tp194
Rp195
(I3
S'|'
p196
NNNI-1
I-1
I0
tp197
bI00
S'\x01'
p198
tp199
bsg53
g10
(g11
(I0
tp200
g13
tp201
Rp202
(I1
(I1
tp203
g195
I00
g198
tp204
bsg55
g10
(g11
(I0
tp205
g13
tp206
Rp207
(I1
(I1
tp208
g20
I00
S'ffffff\xe6\xbf'
p209
tp210
bsg59
g10
(g11
(I0
tp211
g13
tp212
Rp213
(I1
(I1
tp214
g20
I00
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
p215
tp216
bsg62
g10
(g11
(I0
tp217
g13
tp218
Rp219
(I1
(I1
tp220
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p221
tp222
bsg65
g10
(g11
(I0
tp223
g13
tp224
Rp225
(I1
(I1
tp226
g20
I00
S'\xbb\xbd\xd7\xd9\xdf|\xdb='
p227
tp228
bsg70
g10
(g11
(I0
tp229
g13
tp230
Rp231
(I1
(I1
tp232
g20
I00
S'ffffff\xd6?'
p233
tp234
bsg74
g10
(g11
(I0
tp235
g13
tp236
Rp237
(I1
(I1
tp238
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p239
tp240
bsg77
g10
(g11
(I0
tp241
g13
tp242
Rp243
(I1
(I1
tp244
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p245
tp246
bsg80
g10
(g11
(I0
tp247
g13
tp248
Rp249
(I1
(I1
tp250
g20
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p251
tp252
bsg51
g10
(g11
(I0
tp253
g13
tp254
Rp255
(I1
(I1
tp256
g195
I00
g198
tp257
bsg85
g10
(g11
(I0
tp258
g13
tp259
Rp260
(I1
(I1
tp261
g172
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p262
tp263
bsg101
g10
(g11
(I0
tp264
g13
tp265
Rp266
(I1
(I1
tp267
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
p268
tp269
bsg90
g10
(g11
(I0
tp270
g13
tp271
Rp272
(I1
(I1
tp273
g172
I00
S'\x04\x00\x00\x00\x00\x00\x00\x00'
p274
tp275
bsg93
g10
(g11
(I0
tp276
g13
tp277
Rp278
(I1
(I1
tp279
g20
I00
S'\x00\x00\x00\x00\x00\x00\x1c@'
p280
tp281
bsg97
g10
(g11
(I0
tp282
g13
tp283
Rp284
(I1
(I1
tp285
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p286
tp287
bsg87
g10
(g11
(I0
tp288
g13
tp289
Rp290
(I1
(I1
tp291
g20
I00
S'\x00\x00\x00\x00\x00\x00\x14@'
p292
tp293
bsg104
g10
(g11
(I0
tp294
g13
tp295
Rp296
(I1
(I1
tp297
g20
I00
S'\x00\x00\x00\x00\xd0\x12cA'
p298
tp299
bsg108
g10
(g11
(I0
tp300
g13
tp301
Rp302
(I1
(I1
tp303
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p304
tp305
bsg111
g10
(g11
(I0
tp306
g13
tp307
Rp308
(I1
(I1
tp309
g20
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p310
tp311
bssS'theta_index'
p312
(dp313
g65
(I1
I2
tp314
sg87
(I3
I4
tp315
sg70
(I4
I5
tp316
sg104
(I0
I1
tp317
sg28
(I2
I3
tp318
ssbsS'paramfile_text'
p319
S'import numpy as np\r\nfrom prospect.models import priors, sedmodel\r\nfrom prospect.sources import CSPBasis\r\ntophat = priors.tophat\r\nfrom sedpy.observate import load_filters\r\n\r\n# --------------\r\n# RUN_PARAMS\r\n# --------------\r\n\r\nrun_params = {\'verbose\':True,\r\n              \'debug\':False,\r\n              \'outfile\':\'demo_galphot\',\r\n              # Fitter parameters\r\n              \'nwalkers\':128,\r\n              \'nburn\':[10, 10, 10], \'niter\':512,\r\n              \'do_powell\': False,\r\n              \'ftol\':0.5e-5, \'maxfev\':5000,\r\n              \'initial_disp\':0.1,\r\n              # Obs data parameters\r\n              \'objid\':0,\r\n              \'phottable\': \'demo_photometry.dat\',\r\n              \'logify_spectrum\':False,\r\n              \'normalize_spectrum\':False,\r\n              \'wlo\':3750., \'whi\':7200.,\r\n              # SPS parameters\r\n              \'zcontinuous\': 1,\r\n              }\r\n\r\n# --------------\r\n# OBS\r\n# --------------\r\n\r\n# Here we are going to put together some filter names\r\ngalex = [\'galex_FUV\', \'galex_NUV\']\r\nspitzer = [\'spitzer_irac_ch\'+n for n in [\'1\',\'2\',\'3\',\'4\']]\r\nbessell = [\'bessell_\'+n for n in [\'U\', \'B\', \'V\', \'R\', \'I\']]\r\nsdss = [\'sdss_{0}0\'.format(b) for b in [\'u\',\'g\',\'r\',\'i\',\'z\']]\r\n\r\n# The first filter set is Johnson/Cousins, the second is SDSS. We will use a\r\n# flag in the photometry table to tell us which set to use for each object\r\n# (some were not in the SDSS footprint, and therefore have Johnson/Cousins\r\n# photometry)\r\n#\r\n# All these filters are available in sedpy.  If you want to use other filters,\r\n# add their transmission profiles to sedpy/sedpy/data/filters/ with appropriate\r\n# names (and format)\r\nfiltersets = (galex + bessell + spitzer,\r\n              galex + sdss + spitzer)\r\n\r\n\r\ndef load_obs(objid=0, phottable=\'demo_photometry.dat\', **kwargs):\r\n    """Load photometry from an ascii file.  Assumes the following columns:\r\n    `objid`, `filterset`, [`mag0`,....,`magN`] where N >= 11.  The User should\r\n    modify this function (including adding keyword arguments) to read in their\r\n    particular data format and put it in the required dictionary.\r\n\r\n    :param objid:\r\n        The object id for the row of the photomotery file to use.  Integer.\r\n        Requires that there be an `objid` column in the ascii file.\r\n\r\n    :param phottable:\r\n        Name (and path) of the ascii file containing the photometry.\r\n\r\n    :returns obs:\r\n        Dictionary of observational data.\r\n    """\r\n    # Writes your code here to read data.  Can use FITS, h5py, astropy.table,\r\n    # sqlite, whatever.\r\n    # e.g.:\r\n    # import astropy.io.fits as pyfits\r\n    # catalog = pyfits.getdata(phottable)\r\n\r\n    # Here we will read in an ascii catalog of magnitudes as a numpy structured\r\n    # array\r\n    with open(phottable, \'r\') as f:\r\n        # drop the comment hash\r\n        header = f.readline().split()[1:]\r\n    catalog = np.genfromtxt(phottable, comments=\'#\',\r\n                            dtype=np.dtype([(n, np.float) for n in header]))\r\n\r\n    # Find the right row\r\n    ind = catalog[\'objid\'] == float(objid)\r\n    # Here we are dynamically choosing which filters to use based on the object\r\n    # and a flag in the catalog.  Feel free to make this logic more (or less)\r\n    # complicated.\r\n    filternames = filtersets[ int(catalog[ind][\'filterset\']) ]\r\n    # And here we loop over the magnitude columns\r\n    mags = [catalog[ind][\'mag{}\'.format(i)] for i in range(len(filternames))]\r\n    mags = np.array(mags)\r\n\r\n    # Build output dictionary. \r\n    obs = {}\r\n    # This is a list of sedpy filter objects.    See the\r\n    # sedpy.observate.load_filters command for more details on its syntax.\r\n    obs[\'filters\'] = load_filters(filternames)\r\n    # This is a list of maggies, converted from mags.  It should have the same\r\n    # order as `filters` above.\r\n    obs[\'maggies\'] = np.squeeze(10**(-mags/2.5))\r\n    # Hack.  you should use real flux uncertainties\r\n    obs[\'maggies_unc\'] = obs[\'maggies\'] * 0.07\r\n    # Here we mask out any NaNs or infs\r\n    obs[\'phot_mask\'] = np.isfinite(np.squeeze(mags))\r\n    # We have no spectrum.\r\n    obs[\'wavelength\'] = None\r\n\r\n    # Add unessential bonus info.  This will be sored in output\r\n    #obs[\'dmod\'] = catalog[ind][\'dmod\']\r\n    obs[\'objid\'] = objid\r\n\r\n    return obs\r\n\r\n\r\n# --------------\r\n# SPS Object\r\n# --------------\r\n\r\ndef load_sps(zcontinuous=1, compute_vega_mags=False, **extras):\r\n    sps = CSPBasis(zcontinuous=zcontinuous,\r\n                   compute_vega_mags=compute_vega_mags)\r\n    return sps\r\n\r\n# -----------------\r\n# Gaussian Process\r\n# ------------------\r\n\r\ndef load_gp(**extras):\r\n    return None, None\r\n\r\n# --------------\r\n# MODEL_PARAMS\r\n# --------------\r\n\r\n# You\'ll note below that we have 5 free parameters:\r\n# mass, logzsol, tage, tau, dust2\r\n# Each has tophat priors. They are all scalars.\r\n#\r\n# The other parameters are all fixed, but we want to explicitly set their\r\n# values.\r\n\r\nmodel_params = []\r\n\r\n# --- Distance ---\r\n# This is the redshift.  Because we are not separately supplying a ``lumdist``\r\n# parameter, the distance will be determined from the redshift using a WMAP9\r\n# cosmology, unless the redshift is 0, in which case the distance is assumed to\r\n# be 10pc (i.e. for absolute magnitudes)\r\nmodel_params.append({\'name\': \'zred\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 0.0,\r\n                        \'units\': \'\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':4.0}})\r\n\r\n# --- SFH --------\r\n# FSPS parameter.  sfh=4 is a delayed-tau SFH\r\nmodel_params.append({\'name\': \'sfh\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 4,\r\n                        \'units\': \'type\'\r\n                    })\r\n\r\n# Normalization of the SFH.  If the ``mass_units`` parameter is not supplied,\r\n# this will be in surviving stellar mass.  Otherwise it is in the total stellar\r\n# mass formed.\r\nmodel_params.append({\'name\': \'mass\', \'N\': 1,\r\n                        \'isfree\': True,\r\n                        \'init\': 1e7,\r\n                        \'init_disp\': 1e6,\r\n                        \'units\': r\'M_\\odot\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':1e6, \'maxi\':1e9}})\r\n\r\n# Since we have zcontinuous=1 above, the metallicity is controlled by the\r\n# ``logzsol`` parameter.\r\nmodel_params.append({\'name\': \'logzsol\', \'N\': 1,\r\n                        \'isfree\': True,\r\n                        \'init\': 0,\r\n                        \'init_disp\': 0.1,\r\n                        \'units\': r\'$\\log (Z/Z_\\odot)$\',\r\n                        \'prior_function\': tophat,\r\n                        \'prior_args\': {\'mini\':-1, \'maxi\':0.19}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'tau\', \'N\': 1,\r\n                        \'isfree\': True,\r\n                        \'init\': 1.0,\r\n                        \'units\': \'Gyr\',\r\n                        \'prior_function\':priors.logarithmic,\r\n                        \'prior_args\': {\'mini\':0.1, \'maxi\':100}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'tage\', \'N\': 1,\r\n                        \'isfree\': True,\r\n                        \'init\': 5.0,\r\n                        \'init_disp\': 3.0,\r\n                        \'units\': \'Gyr\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':0.101, \'maxi\':14.0}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'sfstart\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 0.0,\r\n                        \'units\': \'Gyr\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':0.1, \'maxi\':14.0}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'tburst\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 0.0,\r\n                        \'units\': \'\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':1.3}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'fburst\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 0.0,\r\n                        \'units\': \'\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':0.5}})\r\n\r\n# --- Dust ---------\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'dust1\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 0.0,\r\n                        \'units\': \'\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':0.1, \'maxi\':2.0}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'dust2\', \'N\': 1,\r\n                        \'isfree\': True,\r\n                        \'init\': 0.35,\r\n                        \'reinit\': True,\r\n                        \'init_disp\': 0.3,\r\n                        \'units\': \'\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':2.0}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'dust_index\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': -0.7,\r\n                        \'units\': \'\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':-1.5, \'maxi\':-0.5}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'dust1_index\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': -1.0,\r\n                        \'units\': \'\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':-1.5, \'maxi\':-0.5}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'dust_tesc\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 7.0,\r\n                        \'units\': \'log(Gyr)\',\r\n                        \'prior_function_name\': None,\r\n                        \'prior_args\': None})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'dust_type\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 0,\r\n                        \'units\': \'index\'})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'add_dust_emission\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': True,\r\n                        \'units\': \'index\'})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'duste_umin\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 1.0,\r\n                        \'units\': \'MMP83 local MW intensity\'})\r\n\r\n# --- Stellar Pops ------------\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'tpagb_norm_type\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 2,\r\n                        \'units\': \'index\'})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'add_agb_dust_model\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': True,\r\n                        \'units\': \'index\'})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'agb_dust\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 1,\r\n                        \'units\': \'index\'})\r\n\r\n# --- Nebular Emission ------\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'add_neb_emission\', \'N\': 1,\r\n                     \'isfree\': False,\r\n                     \'init\': True})\r\n\r\n# Here is a really simple function that takes a **dict argument, picks out the\r\n# `logzsol` key, and returns the value.  This way, we can have gas_logz find\r\n# the value of logzsol and use it, if we uncomment the \'depends_on\' line in the\r\n# `gas_logz` parameter definition.\r\n#\r\n# One can use this kind of thing to transform parameters as well (like making\r\n# them linear instead of log, or divide everything by 10, or whatever.) You can\r\n# have one parameter depend on several others (or vice versa).  Just remember\r\n# that a parameter with `depends_on` must always be fixed.\r\n\r\ndef stellar_logzsol(logzsol=0.0, **extras):\r\n    return logzsol\r\n\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'gas_logz\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 0.0,\r\n                        \'units\': r\'log Z/Z_\\odot\',\r\n#                        \'depends_on\': stellar_logzsol,\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':-2.0, \'maxi\':0.5}})\r\n\r\n# FSPS parameter\r\nmodel_params.append({\'name\': \'gas_logu\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': -2.0,\r\n                        \'units\': \'\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':-4, \'maxi\':-1}})\r\n\r\n# --- Calibration ---------\r\nmodel_params.append({\'name\': \'phot_jitter\', \'N\': 1,\r\n                        \'isfree\': False,\r\n                        \'init\': 0.0,\r\n                        \'units\': \'mags\',\r\n                        \'prior_function\':tophat,\r\n                        \'prior_args\': {\'mini\':0.0, \'maxi\':0.2}})\r\n\r\ndef load_model(**extras):\r\n    # In principle (and we\'ve done it) you could have the model depend on\r\n    # command line arguments (or anything in run_params) by making changes to\r\n    # `model_params` here before instantiation the SedModel object.  Up to you.\r\n    return sedmodel.SedModel(model_params)\r\n\r\n'
p320
sS'prospector_version'
p321
S'3465649'
p322
sS'powell'
p323
Ns.